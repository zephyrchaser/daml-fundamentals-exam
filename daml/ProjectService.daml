module ProjectService where


import DA.Time

type ProjectProposalId = ContractId ProjectProposal
type ProjectId = ContractId Project

data ProjectInfo = ProjectInfo with
    lead: Party
    title: Text
    details: Text
    soloProject: Bool
    participants: [Party]
    budgetRequirements: Optional (Decimal)
    startDate: Date
    endDate: Date
        deriving (Show, Eq, Ord)

class Duration i o where
    getDuration: i -> o

instance Duration ProjectInfo Int where
    getDuration pInfo =
        let
            startTime = time pInfo.startDate 09 00 00
            endTime = time pInfo.endDate 18 00 00
            dayDiff = wholeDays (subTime endTime startTime)
            weekdayDiff = dayDiff - (dayDiff/7 * 2) + 1
        in 
            weekdayDiff

template ProjectProposal 
    with
        proposer: Party
        evaluator: Party
        projectInfo: ProjectInfo
        note: Text

    where
        signatory proposer
        observer evaluator

        key (proposer, projectInfo): (Party, ProjectInfo)
        maintainer key._1

        ensure projectInfo.startDate < projectInfo.endDate

        nonconsuming choice Propose: ProjectProposalId
            controller proposer
            do
                return self

        nonconsuming choice Revise: ProjectProposalId
            with
                newProjectInfo: ProjectInfo
                comment: Text
            controller proposer
            do
                assertMsg ("Project inforomation should be updated")(this.projectInfo /= newProjectInfo)
                archive self
                create this with
                    projectInfo = newProjectInfo
                    note = comment

        choice Cancel: ()
            controller proposer
            do
                return ()

        nonconsuming choice ProposerAccomplishments: ([Text])
            with
                accomplishments: [(ContractId Accomplishment, Accomplishment)]
            controller evaluator
            do
                if (length accomplishments == 0) then return ["NA"]
                else 
                    do 
                        let accDetails = map (\a -> (snd a).project.projectInfo.title <> " : " <> a._2.project.projectInfo.details) accomplishments

                        return accDetails

        choice Reject: ProjectProposalId
            with
                feedback: Text
            controller evaluator
            do
                create this with note = feedback

        choice Approve: ProjectId
            with
                evaluationDate: Date
                evaluatorNote: Optional(Text)
            controller evaluator
            do
                create Project with
                    evaluator
                    projectInfo
                    duration = getDuration projectInfo
                    evaluationDate
                    evaluatorNote
        
        
template Project
    with
        evaluator: Party
        projectInfo: ProjectInfo
        duration: Int
        evaluationDate: Date
        evaluatorNote: Optional (Text)

    where
        signatory evaluator, projectInfo.lead

        key (projectInfo.lead, projectInfo): (Party, ProjectInfo)
        maintainer key._1

        choice Evaluate: Either (ProjectId) (ContractId Accomplishment)
            with
                evaluationDate: Date
                feedback: Optional (Text)
                readyToPublish: Bool
            controller evaluator
            do
                if readyToPublish then do
                    newAccomplishment <- create Accomplishment with
                        evaluator
                        project = this
                    return (Right newAccomplishment)
                else do
                    currentProject <- create this with
                        evaluationDate
                        evaluatorNote = feedback
                    return (Left currentProject)


template Accomplishment
    with
        evaluator: Party
        project: Project
    where
        signatory (signatory project)

        key (project.projectInfo.lead, project.projectInfo): (Party, ProjectInfo)
        maintainer key._1
        
        